#!/bin/bash
#
# swgemu - Control swgemu server on this machine
#
# Author: Lord Kator <lordkator@swgemu.com>
#
# Created: Sun Jan  3 13:30:33 UTC 2016
#

main() {
    case $1 in
	'start' ) server_start ;;
	'status' ) server_status ;;
	'backup' ) server_backup ;;
    esac

    exit 0
}

ICON=/home/vagrant/ZonamaDev/fasttrack/assets/swgemu_icon.png

server_start() {
    if server_status; then
	echo "** Already running **"
	exec screen -D -RR
	exit 1
    fi

    server_update_ip

    cd ~/workspace/Core3/MMOCoreORB/bin

    if [ ! -x core3 ]; then
	echo "** Server not built? **"
	exit 2
    fi

    for i in 5 4 3 2 1
    do
	let "j=$i-1"
	mv o_screenlog.${j}.gz o_screenlog.${i}.gz 2> /dev/null
    done

    mv screenlog.0 o_screenlog.0

    gzip -f o_screenlog.0 &

    exec screen -L ./core3
}

server_status() {
    local pid=$(pgrep core3)

    if [ -z "$pid" ]; then
	echo "Server is not running"
	return 1
    fi

    local uptime=$(ps -p $pid -ho etime)

    echo "Server running on $pid, uptime: $uptime"

    return 0
}

server_update_ip() {
    local server_ip='127.0.0.1'
    local i2=$(netstat -ni|grep eth2)

    # If they have an eth2 they might have enabled the "public" interface
    if [ -n "$i2" ]; then
	# Find the default route
	read -a aa <<<$(ip -o route show|egrep '^default')
	# What's the address of the interface with default route?
	read -a aa <<<$(ip -o -4 addr show ${aa[4]})
	# Let's suggest that ip
	server_ip=$(echo ${aa[3]}|cut -d/ -f1)
    fi

    echo "Suggested IP: $server_ip"

    mysql swgemu -ve "UPDATE galaxy SET ip = '${server_ip}'";
    sed -e "/server_ip/s/server_ip = '[^']*'/server_ip = '"${server_ip}"'/" -i /home/vagrant/server/emuyoda/yoda-config.lua
}

server_backup() {
    if server_status; then
	echo "** Server is running **"

	if yorn "Would you like to join the console so you can shut it down?"; then
	    screen -D -RR
	else
	    echo "** USER ABORTED BACKUP **"
	    exit 12
	fi
    fi

    # NOTE: not the most space efficent way to do it but will work as it's simple for people to understand the format

    BUDIR=~/server/swgemu/backups

    mkdir -p ${BUDIR} 2> /dev/null && echo "** Created ${BUDIR} directory **"

    TMPDIR=$(mktemp -d ${BUDIR}/swgemu-backup-temp.XXXXXX)

    trap 'set +xe;st=$?;echo "** UNEXPECTED EXIT=$st, PARTIAL BACKUP LEFT IN ${TMPDIR} **";exit $st' 0

    NOW=$(date +%s)

    STAMP=$(date -d@${NOW} '+%Y%m%d%H%M%S%Z')

    BUFILE=${BUDIR}/swgemu-backup-${STAMP}.tar.gz

    echo "** Backing up to ${BUFILE} **"

    set -xe

    mysqldump --opt swgemu > "${TMPDIR}/mysqldump.sql"

    cd ~/workspace/Core3/MMOCoreORB/bin

    cp -rv conf databases ${TMPDIR}

    cd ${TMPDIR}

    files=$(echo *)

    read sz dir <<< $(du -s --block-size=1 .)

    # TODO - Other useful metadata here?
    echo '{"backup_size_bytes":"'${sz}'","backup_date":"'$(date -d@${NOW})'","backup_isodate":"'$(date -d@${NOW} -Iseconds)'","backup_unixepoc":"'${NOW}'"}' > ${TMPDIR}/metadata.json

    # TODO do we need the __db files if the db is closed?
    tar cvzf ${BUFILE} metadata.json $(find $files -type f|sort)

    rm -fr ${TMPDIR}

    set +xe

    trap - 0

    echo "** SUCCESS: Backup saved to ${BUFILE} **"

    exit 0
}

yorn() {
  if tty -s; then
      echo -n -e "$@ Y\b" > /dev/tty
      read yorn < /dev/tty
      case $yorn in
	[Nn]* ) return 1;;
      esac
  fi

  return 0
}

main $@
